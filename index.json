[
{
	"uri": "http://makingco.de/foundations/digital-circuits/",
	"title": "Digital Circuits",
	"tags": [],
	"description": "",
	"content": " When we work with computers, we mostly deal with digital rather than analog circuits. The digital circuits in computers are electrical circuits that operate with two values: true and false, or yes and no.\nComputers are digital circuits as they internally only work with those two values, usually referred to as bits. A bit is a single value that is either true or false.\nBy combining these bits and making the circuits fairly complex, we can use such digital circuits to solve a variety of problems - after all computers have proven to be quite powerful. But how does that work?\nRephrasing the problem First we need to rephrase the problem in a way that a digital circuit (e.g. a computer) can work with it. For example the problem \u0026ldquo;Can I play computer games today?\u0026rdquo; might be rephrased to \u0026ldquo;Do I have nothing else on my schedule?\u0026rdquo;\nThat is a \u0026ldquo;Yes/No\u0026rdquo; question, so it can be answered with a digital circuit. Now we need to think of how we would represent a \u0026ldquo;yes\u0026rdquo; and a \u0026ldquo;no\u0026rdquo; answer. Let\u0026rsquo;s say we use a single light - if it turns on, we can play and if it doesn\u0026rsquo;t, we can\u0026rsquo;t play.\nThe digital circuit to answer our question is a power source (e.g. battery), the light (e.g. an LED with a resistor to limit the voltage) and a switch. We can use the switch to input the answer to our question and the circuit will show us if we can play:\n   Schedule free? Switch LED Can we play computer games?     yes on on yes   no off off no    Here is a working version of our digital circuit:\nTo avoid having to think of power sources, resistors and so on, there is an alternative way of illustrating digital circuits, often referred to as the \u0026ldquo;logical circuit\u0026rdquo;. Here is the same circuit in the logical circuit schematic:\nSolving more complex problems The previous digital circuit was not very interesting, but admittedly simple. Let\u0026rsquo;s think of a circuit solving a more complex problem.\nWe want to build a circuit that can answer if somebody can take the company car or not. Let\u0026rsquo;s rephrase it as a few yes/no questions:\n Are you old enough to drive a car? Do you have a valid drivers licence? Are you an employee of the company? If you are not an employee, did somebody give you permission to take the car? Is the car available at the desired time?  Alright, there\u0026rsquo;s one important detail in there - question number four only needs to be answered (and answered with \u0026ldquo;yes\u0026rdquo;), if question number 3 has been answered with \u0026ldquo;no\u0026rdquo;. We could alternatively rephrase this as \u0026ldquo;Question three OR question four needs to be answered with yes\u0026rdquo;.\nNow that we broke the problem down into yes/no questions, we can design our digital circuit.\nIf we represent all questions 1-5 with switches again, we can only light up the \u0026ldquo;answer\u0026rdquo; light if questions one, two and five are answered and either three or four have been answered with \u0026ldquo;yes\u0026rdquo;, so our circuit would look like this:\nTo explain the circuit, we can look at the questions again:\n   Old enough? Drivers licence? Employee? alternative: Permission? Car free? Result     no doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter No   yes no d.m. d.m. d.m. no   yes yes no no d.m. no   yes yes no yes no no   yes yes yes no no no   yes yes no yes yes yes   yes yes yes no yes yes    Looking at the table, we can formulate it this way: If Q3 OR Q4 are answered \u0026ldquo;yes\u0026rdquo; AND all other questions are answered \u0026ldquo;yes\u0026rdquo;, we can take the company car.\nThe logical circuit is a lot less cluttered and represents the logic well:\nFor an interactive version, click here.\nIn the logic circuit above, you see an input that is either \u0026ldquo;1\u0026rdquo; (\u0026ldquo;yes\u0026rdquo;, on) or \u0026ldquo;0\u0026rdquo; (\u0026ldquo;no\u0026rdquo;, off) for each question. This is where we put our answers in.\nThe answers for Q3 and Q4 go into a kind of switch that only outputs true (\u0026ldquo;yes\u0026rdquo;), if at least one of the inputs is true. Then, this output and all the other questions go into a switch that only outputs true (\u0026ldquo;yes\u0026rdquo;), if all inputs are true.\nThese two switches are called gates, in this case they are an OR and AND gate, specifically.\nSuch gates (and other types of gates) can be built with transistors, which is why the amount of transistors that fit into a processor matters - more transistors = more gates = more things it can do in a single step.\n We have seen, that both the logical circuit and the \u0026ldquo;real\u0026rdquo; circuit behave identically, so we can use either tool in different stages:\n When we need to figure out the logic (i.e. for which input combination our output is true and false), we can use the logic circuit to find our solution. Such a tool could be simulator.io When we need to build the real electrical circuit in hardware, we can use the circuit schematics to build the circuit based on what we have found out in the logic circuit. We can use tools such as TinkerCAD for this  Now that we understand how digital logic works on a circuit level, we can move to software and binary logic (true and false, 1 and 0). This is called boolean logic and is discussed in the next section.\n"
},
{
	"uri": "http://makingco.de/about/",
	"title": "Where to find what",
	"tags": [],
	"description": "",
	"content": " Overview Where to find what? Lorem Ipsum.\n"
},
{
	"uri": "http://makingco.de/foundations/boolean-logic/",
	"title": "Boolean logic",
	"tags": [],
	"description": "",
	"content": " In the previous section, we have seen that we can use gates in a digital circuit to represent and answer more complex problems.\nLogic in software When programming software, we will often have to deal with decisions on a logical level or even on a bit-level. To allow us to do that, all programming languages offer some kind of boolean logic operators.\nRecap: Boolean values We have established that in digital logic, we work with two values. They represent the concept of \u0026ldquo;true\u0026rdquo; and \u0026ldquo;false\u0026rdquo; and their meanings can be slightly different depending on how you look at them, for instance:\n   true false     yes no   1 0   on off   something nothing    These values are also referred to as boolean value or boolean for short, i.e. something that can have one of two values and nothing else.\nFor this chapter, we will use true and false, but we could as well use any other example from the table above.\nThe operators Let\u0026rsquo;s see what those operators are:\n Not (negation) And (conjunction) Or (disjunction)  Let\u0026rsquo;s dive into each of them!\nNegation This operator is most useful in combination with one of the other two operators, but can also be used alone. It inverts, i.e. \u0026ldquo;turns around\u0026rdquo; a boolean value:\n   x NOT x     true false   false true    In most programming languages this operator is either expressed as ! (e.g. !x is the negation of a boolean x) or the word not.\n  Example   var child = { wasNice: false } var wasNice = child.wasNice; var wasNaughty = !wasNice; // wasNaughty will be true    Conjunction Disjunction "
},
{
	"uri": "http://makingco.de/foundations/binary-numbers/",
	"title": "Binary numbers",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://makingco.de/foundations/",
	"title": "Foundations",
	"tags": [],
	"description": "",
	"content": " Foundations In this section you can find articles and videos explaining the basic concepts of computer systems and software:\n What is a digital circuit? What is boolean logic? What are binary numbers? What are hexadecimal numbers? What is an algorithm?  "
},
{
	"uri": "http://makingco.de/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Making Code The joy of making digital stuff Lorem impsum..\n"
},
{
	"uri": "http://makingco.de/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://makingco.de/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]