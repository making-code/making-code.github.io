[
{
	"uri": "http://makingco.de/foundations/digital-circuits/",
	"title": "Digital Circuits",
	"tags": [],
	"description": "",
	"content": " When we work with computers, we deal with digital rather than analog circuits. They are electrical circuits that operate with two values: true and false, or yes and no.\nComputers only work with those two values, usually referred to as bits. A bit is a single value that is either true or false.\nWe combine 8 bits into bytes and create combinations to solve a variety of problems. But how does that work?\nRephrasing the problem First we need to rephrase the problem in a way that a digital circuit (e.g. a computer) can work with it. For example we can rephrase the problem \u0026ldquo;Can I play computer games today?\u0026rdquo; to \u0026ldquo;Do I have nothing else on my schedule?\u0026rdquo;\nThat is a \u0026ldquo;yes/no\u0026rdquo; question, so a digital circuit can answer it . Now we need to think of how we would represent a \u0026ldquo;yes\u0026rdquo; and a \u0026ldquo;no\u0026rdquo; answer.\nLet\u0026rsquo;s say we use a single light - if it turns on, we can play and if it doesn\u0026rsquo;t, we can\u0026rsquo;t play.\nThe digital circuit to answer our question could be a battery, the light and a switch. It might need a resistor, too so that the voltage through the light isn\u0026rsquo;t too high.\nWe can use the switch to input the answer to our question and the circuit will show us if we can play:\n   Schedule free? Switch LED Can we play computer games?     yes on on yes   no off off no    Here is a working version of our digital circuit:\nWe were thinking about batteries, resistors and so on, instead of the logic. To focus on the logic we can leave all those out and focus on the logic only.\nHere is the same circuit in the logical circuit schematic:\nSolving more complex problems The previous digital circuit was not very interesting, but pretty simple. Let\u0026rsquo;s think of a circuit solving a more complex problem.\nWe want to build a circuit that can answer if somebody can take the company car or not. Let\u0026rsquo;s rephrase it as a few yes/no questions:\n Are you old enough to drive a car? Do you have a valid drivers licence? Are you an employee of the company? If you are not an employee, did somebody give you permission to take the car? Is the car available at the desired time?  We can see that question number four only matters, if the answer to question number 3 was \u0026ldquo;no\u0026rdquo;. We could rephrase this as \u0026ldquo;The answer to question three OR four needs to be yes\u0026rdquo;.\nNow that we broke the problem down into yes/no questions, we can design our digital circuit.\nWe can represent all questions with switches. When answers one, two and five and at at least one of the questions three and four are yes we can turn the light on. In any other case the light will be off. Our circuit will look like this:\nTo explain the circuit, we can look at the questions again:\n   Old enough? Drivers licence? Employee? alternative: Permission? Car free? Result     no doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter doesn\u0026rsquo;t matter No   yes no d.m. d.m. d.m. no   yes yes no no d.m. no   yes yes no yes no no   yes yes yes no no no   yes yes no yes yes yes   yes yes yes no yes yes    Looking at the table, we can formulate it this way: If Q3 OR Q4 are answered \u0026ldquo;yes\u0026rdquo; AND all other questions are answered \u0026ldquo;yes\u0026rdquo;, we can take the company car.\nThe logical circuit is a lot less cluttered and represents the logic well:\nFor an interactive version, click here.\nIn the logic circuit above, you see an input that is either \u0026ldquo;1\u0026rdquo; (\u0026ldquo;yes\u0026rdquo;, on) or \u0026ldquo;0\u0026rdquo; (\u0026ldquo;no\u0026rdquo;, off) for each question. This is where we put our answers in.\nThe answers for Q3 and Q4 go into a kind of switch that only outputs true (\u0026ldquo;yes\u0026rdquo;), if at least one of the inputs is true. Then, this output and all the other questions go into a switch that only outputs true (\u0026ldquo;yes\u0026rdquo;), if all inputs are true.\nThese two switches are so-called gates, in this case they are an OR and AND gate.\nTransistors or combinations of transistors represent logical gates in an electric circuit. That\u0026rsquo;s why the amount of transistors that fit into a processor matters. More transistors = more gates = more things done in a single step.\n Now we know how real digital circuits and digital logical circuits work. We have also seen that they behave identical and we can express a digital circuit as a logical one and vice versa.\nLogical circuits and real circuits are useful for different situations:\n When we need to figure out the logic (i.e. the behavior), we can use the logic circuit to find our solution. Such a tool could be simulator.io When we make hardware we need more detail. We need an electrical schematic, so we can use tools such as TinkerCAD for this  When programming, we care less about the electrical circuits. In the next section we will discuss logic and operators on our values true and false. So read on to learn about boolean logic in the next section.\n"
},
{
	"uri": "http://makingco.de/about/",
	"title": "Where to find what",
	"tags": [],
	"description": "",
	"content": " Overview Where to find what? Lorem Ipsum.\n"
},
{
	"uri": "http://makingco.de/foundations/boolean-logic/",
	"title": "Boolean logic",
	"tags": [],
	"description": "",
	"content": " In the previous section, we have seen that we can use gates in a digital circuit to represent and answer more complex problems.\nLogic in software When programming software, we will often have to deal with decisions on a logical level or even on a bit-level. To allow us to do that, all programming languages offer some kind of boolean logic operators.\n  Recap: Boolean values   We have established that in digital logic, we work with two values. They represent the concept of \u0026ldquo;true\u0026rdquo; and \u0026ldquo;false\u0026rdquo; and their meanings can be slightly different depending on how you look at them, for instance:\n   true false     yes no   1 0   on off   positive voltage negative voltage    These values are also referred to as boolean value or boolean for short, i.e. something that can have one of two values and nothing else.\n  For this chapter, we will use true and false to refer to our boolean values.\nThe operators Let\u0026rsquo;s see what those operators are:\n Not (negation) And (conjunction) Or (disjunction) Exclusive Or (XOR)  Let\u0026rsquo;s dive into each of them!\nNOT This operator is most useful in combination with one of the other two operators, but can also be used alone. It inverts, i.e. \u0026ldquo;turns around\u0026rdquo; a boolean value:\n   x NOT x     true false   false true    In most programming languages this operator is either expressed as ! (e.g. !x is the negation of a boolean x) or the word not.\n  Example   var child = { wasNice: false }; var wasNice = child.wasNice; var wasNaughty = !wasNice; // wasNaughty will be true    AND The logical and operator can be used when two booleans need to be true for the result to be true.\n   x y x AND y     false false false   true false false   false true false   true true true      Example   var user = { isLoggedIn: true, isAdmin: false }; if (user.isLoggedIn \u0026amp;\u0026amp; user.isAdmin) { console.log('Welcome, boss!'); }    OR The logical or operator can be used when at least one of two booleans need to be true for the result to be true.\n   x y x OR y     false false false   true false true   false true true   true true true      Example   var wantsKetchup = true; var wantsMayo = false; if (wantsKetchup || wantsMayo) { console.log('Putting sauce(s) on your fries...'); }    XOR The previous logical OR operator returns true when at least one of the inputs is true - but often we want to make sure that exactly one of the inputs is true.\nThis is a common logical operator called eXtrutruclusive OR or XOR for short. It is usually not consider a basic boolean operator because it can be created using NOT, AND and OR.\n  Creating the XOR from other operators   The XOR operator can be built from NOT, AND and OR operations. We have two booleans x and y and we only want to have a true as the result if either x or y are true, but not if both are true.\nThere are multiple ways of implementing this with logical NOT, AND and OR:\n (x \u0026amp;\u0026amp; (!y)) || ((!x) \u0026amp;\u0026amp; y) (x || y) \u0026amp;\u0026amp; (!y || !x)  Here\u0026rsquo;s a logical circuit to demonstrate this by comparing the first way to an actual XOR:\nHere is an interactive version\n  "
},
{
	"uri": "http://makingco.de/foundations/binary-numbers/",
	"title": "Binary numbers",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://makingco.de/foundations/",
	"title": "Foundations",
	"tags": [],
	"description": "",
	"content": " Foundations In this section you can find articles and videos explaining the basic concepts of computer systems and software:\n What is a digital circuit? What is boolean logic? What are binary numbers? What are hexadecimal numbers? What is an algorithm?  "
},
{
	"uri": "http://makingco.de/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Making Code The joy of making digital stuff Lorem impsum..\n"
},
{
	"uri": "http://makingco.de/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://makingco.de/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]